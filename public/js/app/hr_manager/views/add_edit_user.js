// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  App.AddEditUser = (function(_super) {
    __extends(AddEditUser, _super);

    function AddEditUser() {
      _ref = AddEditUser.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    AddEditUser.prototype.template = new EJS({
      url: 'templates/general/modal-tpl.ejs'
    });

    AddEditUser.prototype.isEdit = false;

    AddEditUser.prototype.model = new App.User;

    AddEditUser.prototype.events = {
      'click #form-save': 'eventSelection'
    };

    AddEditUser.prototype.initialize = function(params) {
      this.isEdit = params.isEdit;
      return this.render();
    };

    AddEditUser.prototype.render = function() {
      var formTpl, positionName;
      formTpl = new EJS({
        url: 'templates/users/user-form.ejs'
      });
      if (!this.isEdit) {
        this.$el.html(this.template.render({
          modalTitle: 'Add New Manager or Admin',
          modalBody: formTpl.render()
        }));
      } else {
        positionName = this.model.get('name');
        this.$el.html(this.template.render({
          modalTitle: 'Edit record "<strong>' + positionName + '</strong>"',
          modalBody: formTpl.render()
        }));
        this._fiilFormValues();
      }
      return this;
    };

    AddEditUser.prototype.eventSelection = function(eve) {
      if (!this.isEdit) {
        return this.saveNewPosition(eve);
      } else {
        return this.editRecord(eve);
      }
    };

    AddEditUser.prototype.saveNewPosition = function(eve) {
      var alertTpl, modelData,
        _this = this;
      eve.preventDefault();
      alertTpl = new EJS({
        url: 'templates/general/alert-danger-tpl.ejs'
      });
      modelData = this._serializeForm();
      if (modelData === false || !modelData) {
        return false;
      }
      this.model.set(modelData);
      this.model.on('invalid', function(model, error) {
        return $('#alert-message').html(alertTpl.render({
          alertMessage: error
        }));
      });
      return this.model.save(this.model.toJSON(), {
        error: function(model, xhr, options) {
          var errorMessage;
          errorMessage = "Server Error. Can't save your data. Try again later.";
          if (xhr.responseJSON && xhr.responseJSON.error && xhr.responseJSON.error.message) {
            errorMessage = xhr.responseJSON.error.message;
          }
          return $('#alert-message').html(alertTpl.render({
            alertMessage: errorMessage
          }));
        },
        success: function() {
          $('#popup-window').modal('hide');
          Log('Add new position window was closed');
          return _this.collection.fetch({
            reset: true
          });
        }
      });
    };

    AddEditUser.prototype._serializeForm = function() {
      var alertTpl, formData, formFields;
      formFields = this.$el.find('#add-edit-user-form').serializeArray();
      formData = {};
      alertTpl = new EJS({
        url: 'templates/general/alert-danger-tpl.ejs'
      });
      $.each(formFields, function(key, obj) {
        if (!obj['value']) {
          return;
        }
        return formData[obj['name']] = obj['value'];
      });
      if (!formData['conf-password'] || formData['conf-password'] === !formData['password'] || formData['conf-password'].length < 4) {
        if (!this.isEdit) {
          $('#alert-message').html(alertTpl.render({
            alertMessage: 'Passwords do not match'
          }));
          return false;
        } else {
          formData['date'] = new Date();
          return formData;
        }
      } else {
        delete formData['conf-password'];
        formData['date'] = new Date();
        return formData;
      }
    };

    AddEditUser.prototype.editRecord = function(eve) {
      var alertTpl,
        _this = this;
      eve.preventDefault();
      alertTpl = new EJS({
        url: 'templates/general/alert-danger-tpl.ejs'
      });
      this.model.set(this._serializeForm());
      return this.model.save(this.model.changed, {
        error: function() {
          return $('#alert-message').html(alertTpl.render({
            alertMessage: "Server Error. Can't save your data. Try again later."
          }));
        },
        success: function() {
          $('#popup-window').modal('hide');
          Log('Add new position window was closed');
          return _this.collection.fetch({
            reset: true
          });
        }
      });
    };

    AddEditUser.prototype._fiilFormValues = function() {
      var form;
      Log(this.model.toJSON());
      form = this.$el.find('#add-edit-user-form');
      form.find('#inputName').val(this.model.get('name'));
      form.find('#inputEmail').val(this.model.get('email'));
      form.find('#inputPosition').val(this.model.get('position'));
      form.find('#inputFilial').val(this.model.get('filial'));
      return form.find('#inputRole').val(this.model.get('role').toLowerCase());
    };

    return AddEditUser;

  })(App.PopupWondow);

}).call(this);

/*
//@ sourceMappingURL=add_edit_user.map
*/
