/**
 * User: Oleksii Savchenko
 * Date: 12.11.13
 * Time: 10:10
 */

/**
 * @param syllableNum - The number of syllables in a password
 * @param numPass - The number of passwords
 * @param useNums - Use numbers or not
 */

exports.getSalt = function (syllableNum, numPass, useNums) {
    syllableNum = typeof(syllableNum) != 'undefined' ? syllableNum : 3;
    numPass = typeof(numPass) != 'undefined' ? numPass : 10;
    useNums = typeof(useNums) != 'undefined' ? useNums : true;

    function rand(from, to) {
        from = typeof(from) != 'undefined' ? from : 0;    // options
        to = typeof(to) != 'undefined' ? to : from + 1;    // by default
        return Math.round(from + Math.random() * (to - from));
    };

    function getRandChar(a) {
        return a.charAt(rand(0, a.length - 1));
    }


    // The most suitable consonants for use as capital
    var cCommon = "bcdfghklmnprstvz";
    var cAll = cCommon + "jqwx";    // All the consonants
    var vAll = "aeiouy";    // All vowels
    var lAll = cAll + vAll;    // All letters
    var newPass = '';

    for (var j = 0; j < numPass; ++j) {
        // Factor determining the probability of occurrence of the number between syllables
        var numProb = 0, numProbStep = 0.25;
        for (var i = 0; i < syllableNum; ++i) {
            if (Math.round(Math.random())) {
                newPass += getRandChar(cCommon).toUpperCase() +
                    getRandChar(vAll) +
                    getRandChar(lAll);
            } else {
                newPass += getRandChar(vAll).toUpperCase() +
                    getRandChar(cCommon);
            }
            if (useNums && Math.round(Math.random() + numProb)) {
                newPass += rand(0, 9);
                numProb += numProbStep;
            }
        }

    }
    return newPass;
};